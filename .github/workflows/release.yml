name: Release

# Configures this workflow to run every time a change is pushed to the master.
on:
  push:
    branches:
      - main
    tags:
      - "v*"

jobs:
  prepare_go_client_android:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23.x'

      - name: Vendor Cloak/internal
        run: |
          git clone --depth 1 https://github.com/cbeuw/Cloak tmp
          mkdir -p go_client/modules/Cloak
          cp -r tmp/internal go_client/modules/Cloak/
          rm -rf tmp

      - name: Download Go modules
        run: |
          cd go_client
          go mod download
          cd ..

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          packages: >
            platforms;android-35
            build-tools;35.0.0
            platform-tools

      - name: Install gomobile & init
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init     

      - name: Fetch gomobile runtime
        run: |
          cd go_client            
          go get golang.org/x/mobile/bind@latest
          cd ..

      - name: Build Go AAR
        run: |
          cd go_client
          gomobile bind -target=ios -o ../OutlineLib.xcframework ./kotlin_exports 
          cd ..

  windows_build:
    runs-on: windows-latest
    strategy:
      matrix:
        go-version: ["1.23.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Install dependencies
        run: |
          cd src
          cd ..

      - name: Install submodules
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          # mv -Force log-files/piper.go Cloak/internal/client/piper.go
          # mv -Force log-files/connector.go Cloak/internal/client/connector.go
          # mv -Force log-files/TLS.go Cloak/internal/client/TLS.go
          # mv -Force log-files/copy.go Cloak/internal/common/copy.go

      - name: Clone ck-client
        run: |
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/Windows Cloak
          cp -r ck-client/WindowsTunnelService Cloak/Windows/WindowsTunnelService
          cp ck-client/app.go Cloak/Windows
          cp ck-client/ck-client.go Cloak/Windows
          cp ck-client/Icon.png Cloak/Windows
          cp ck-client/log_android.go Cloak/Windows
          cp ck-client/outline_device.go Cloak/Windows
          cp ck-client/outline_packet_proxy.go Cloak/Windows
          cp ck-client/protector.go Cloak/Windows

      - name: Install Go dependencies
        run: |
          cd Cloak/Windows
          go get github.com/amnezia-vpn/amneziawg-windows/tunnel@v0.1.4-0.20240526104134-db18f2297e5e
          go mod tidy
          go install fyne.io/fyne/v2/cmd/fyne@latest
          cd ../..

      - name: Build Windows tunnel service
        run: |
          cd Cloak/Windows/WindowsTunnelService
          go build -o tunnel-service.exe .
          cd ../../../

      - name: Build windows client
        run: |
          cd Cloak/Windows
          fyne package -os windows
          cd ../..

      - name: Make Windows zip
        run: |
          mkdir dobbyvpn-windows-amd64
          mkdir dobbyvpn-windows-amd64/libs
          cp Cloak/Windows/WindowsTunnelService/tunnel-service.exe dobbyvpn-windows-amd64/libs/tunnel-service.exe
          cp Cloak/Windows/Windows.exe dobbyvpn-windows-amd64/dobbyvpn-windows.exe
          Compress-Archive dobbyvpn-windows-amd64 dobbyvpn-windows-amd64.zip

      - name: Upload Windows client
        uses: actions/upload-artifact@master
        with:
          name: dobbyvpn-windows-amd64.zip
          path: dobbyvpn-windows-amd64.zip

  linux_build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          # mv -f log-files/piper.go Cloak/internal/client/piper.go
          # mv -f log-files/connector.go Cloak/internal/client/connector.go
          # mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          # mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          
          cp -r ck-client/Linux Cloak
          cp ck-client/Linux/awgconf/*.go Cloak/Linux/
          cp ck-client/Linux/awgconf/*.go Cloak/Linux/tunnel/
          
          cp ck-client/app.go Cloak/Linux
          cp ck-client/ck-client.go Cloak/Linux
          cp ck-client/Icon.png Cloak/Linux
          cp ck-client/log_android.go Cloak/Linux
          cp ck-client/outline_device.go Cloak/Linux
          cp ck-client/outline_packet_proxy.go Cloak/Linux
          cp ck-client/protector.go Cloak/Linux
          
          cd Cloak/Linux
          go mod tidy
          cd ../..
      - name: Build linux ck-client
        run: |
          cd Cloak/Linux

          cd tunnel/
          go build -o tunnel-service .
          cd ../

          go build -o dobbyvpn-linux-amd64 .
          cd ../../
      - name: Make linux zip
        run: |
          mkdir dobbyvpn-linux-amd64
          mkdir dobbyvpn-linux-amd64/libs/
          mv Cloak/Linux/dobbyvpn-linux-amd64 dobbyvpn-linux-amd64/dobbyvpn-linux-amd64
          mv Cloak/Linux/tunnel/tunnel-service dobbyvpn-linux-amd64/libs/tunnel-service
          zip -r dobbyvpn-linux-amd64.zip dobbyvpn-linux-amd64
      - name: Upload Linux client
        uses: actions/upload-artifact@master
        with:
          name: dobbyvpn-linux-amd64.zip
          path: dobbyvpn-linux-amd64.zip

  macos_build_arm64:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: ["1.23.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"
      - name: Clone Cloak and copying ck-client
        run: |
          git submodule add https://github.com/cbeuw/Cloak
          git submodule init
          git submodule update
          # mv -f log-files/piper.go Cloak/internal/client/piper.go
          # mv -f log-files/connector.go Cloak/internal/client/connector.go
          # mv -f log-files/TLS.go Cloak/internal/client/TLS.go
          # mv -f log-files/copy.go Cloak/internal/common/copy.go
          mkdir Cloak/internal/out
          cp log-files/logging.go Cloak/internal/out/logging.go
          cp -r ck-client/MacOs Cloak
          cp ck-client/app.go Cloak/MacOs
          cp ck-client/ck-client.go Cloak/MacOs
          cp ck-client/Icon.png Cloak/MacOs
          cp ck-client/log_android.go Cloak/MacOs
          cp ck-client/outline_device.go Cloak/MacOs
          cp ck-client/outline_packet_proxy.go Cloak/MacOs
          cp ck-client/protector.go Cloak/MacOs
          cd Cloak
          git clone --branch v1.6.0 https://github.com/database64128/swgp-go.git
          echo "replace github.com/database64128/swgp-go v1.6.0 => ./swgp-go" >> go.mod
          cd ..
          cd Cloak/MacOs
          go mod tidy
          cd ../..

      - name: Build macos ck-client
        run: |
          cd Cloak/MacOs
          go build -o dobbyvpn-darwin-arm64 .
      - name: Upload MacOs client
        uses: actions/upload-artifact@master
        with:
          name: dobbyvpn-darwin-arm64
          path: Cloak/MacOs/dobbyvpn-darwin-arm64

  android_build:
    needs: prepare_go_client_android
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ["1.23.2"]

    steps:
      - uses: actions/checkout@v4

      - name: Download Go AAR
        uses: actions/download-artifact@master
        with:
          name: go_client_android.aar
          path: ck-android/CkClient/libs

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Set up Git Submodules
        run: |
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..
          sudo apt-get install golang gcc libgl1-mesa-dev xorg-dev
          sudo apt-get install gcc-multilib
          sudo apt-get install gcc-mingw-w64

      - name: Android build
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew assembleDebug
          cd ../..
          cp ck-android/CkClient/app/build/outputs/apk/debug/app-debug.apk dobbyvpn-android.apk

      - name: Upload Android client
        uses: actions/upload-artifact@master
        with:
          name: dobbyvpn-android.apk
          path: dobbyvpn-android.apk

  ios_build:
    runs-on: macos-latest
    strategy:
      matrix:
        go-version: [ "1.23.2" ]

    steps:
      - name: Checkout node
        uses: actions/checkout@v2

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.22.x"

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"

      - name: Select Xcode 16.1
        run: sudo xcode-select -s /Applications/Xcode_16.1.app

      - name: Set up Git Submodules
        run: |
          git submodule update --init --recursive

      - name: Install dependencies
        run: |
          cd src
          go get ./...
          cd ..

      - name: Build Kotlin Multiplatform
        run: |
          cd ck-android/CkClient
          chmod +x gradlew
          ./gradlew linkReleaseFrameworkIosArm64

      - name: Build iOS App
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERT_P12_PASSWORD: ${{ secrets.CERT_P12_PASSWORD }}
          CERT_P12_BASE64: ${{ secrets.CERT_P12_BASE64 }}
          PROVISION_DOBBY_BASE64: ${{ secrets.PROVISION_DOBBY_BASE64 }}
          PROVISION_DOBBY_TUNNEL_BASE64: ${{ secrets.PROVISION_DOBBY_TUNNEL_BASE64 }}
        run: |
          set -euo pipefail

          # Prepare paths
          CERT_PATH="$RUNNER_TEMP/cert.p12"
          PROVISION_DOBBY_PATH="$RUNNER_TEMP/profile1.mobileprovision"
          PROVISION_DOBBY_TUNNEL_PATH="$RUNNER_TEMP/profile2.mobileprovision"
          KEYCHAIN_PATH="$RUNNER_TEMP/build.keychain"

          # Decode base64 secrets
          echo "$CERT_P12_BASE64" | base64 --decode > "$CERT_PATH"
          echo "$PROVISION_DOBBY_BASE64" | base64 --decode > "$PROVISION_DOBBY_PATH"
          echo "$PROVISION_DOBBY_TUNNEL_BASE64" | base64 --decode > "$PROVISION_DOBBY_TUNNEL_PATH"

          # Setup keychain and import certificate
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security default-keychain -s "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security import "$CERT_PATH" -k "$KEYCHAIN_PATH" -P "$CERT_P12_PASSWORD" -T /usr/bin/codesign
          security set-key-partition-list -S apple-tool:,apple: -s -k "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # Install provisioning profiles
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$PROVISION_DOBBY_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/
          cp "$PROVISION_DOBBY_TUNNEL_PATH" ~/Library/MobileDevice/Provisioning\ Profiles/

      - name: Verify provisioning profile contents
        run: |
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "== $profile =="
            security cms -D -i "$profile" | grep network || echo "No Network Extension entitlement"
          done

      - name: List installed provisioning profiles
        run: |
          echo "Listing provisioning profiles in ~/Library/MobileDevice/Provisioning Profiles"
          ls -l ~/Library/MobileDevice/Provisioning\ Profiles
          for profile in ~/Library/MobileDevice/Provisioning\ Profiles/*.mobileprovision; do
            echo "----"
            security cms -D -i "$profile" | plutil -extract Name xml1 -o - - | xmllint --format -
          done

      - name: 📦 Build and Archive iOS App
        run: |
          set -euo pipefail
          cd ck-android/CkClient/iosApp
          xcodebuild -project iosApp.xcodeproj \
                     -scheme iosApp \
                     -configuration Release \
                     -sdk iphoneos \
                     -archivePath $PWD/build/iosApp.xcarchive \
                     archive
              ls -lh $PWD/build

              if [ -e "$PWD/build/iosApp.xcarchive" ]; then
                  echo "Archive created successfully!"
              else
                  echo "Archive not found!"
              exit 1
              fi

      - name: Export IPA
        run: |
          cd ck-android/CkClient/iosApp
          cat > exportOptions.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store-connect</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>vpn.dobby.app</key>
              <string>DobbyVPNAppStore</string>
              <key>vpn.dobby.app.tunnel</key>
              <string>DobbyVPNTunnelAppStore</string>
            </dict>
            <key>teamID</key>
            <string>F6CHJX72K5</string>
          </dict>
          </plist>
          EOF

          xcodebuild -exportArchive \
                     -archivePath $PWD/build/iosApp.xcarchive \
                     -exportPath $PWD/build/ipa \
                     -exportOptionsPlist exportOptions.plist

      - name: Upload signed .IPA to artifacts
        uses: actions/upload-artifact@master
        with:
          name: DobbyVPN.ipa
          path: ck-android/CkClient/iosApp/build/ipa/*.ipa
  
  #      - name: Publish to TestFlight via FastLane
  #        env:
  #          APP_STORE_API_KEY: ${{ secrets.APP_STORE_API_KEY }}
  #          APP_STORE_KEY_ID: ${{ secrets.APP_STORE_KEY_ID }}
  #          APP_STORE_ISSUER_ID: ${{ secrets.APP_STORE_ISSUER_ID }}
  #        run: |
  #          gem install fastlane
  #          echo '{
  #          "key_id": "'"$APP_STORE_KEY_ID"'",
  #          "issuer_id": "'"$APP_STORE_ISSUER_ID"'",
  #          "key": "'"$APP_STORE_API_KEY"'"
  #          }' > api_key.json
  #
  #          fastlane pilot upload \
  #            --ipa ck-android/CkClient/iosApp/build/ipa/*.ipa \
  #            --api_key_path api_key.json
  #          rm -f api_key.json

  release:
    runs-on: ubuntu-latest
    needs: [windows_build, linux_build, macos_build_arm64, android_build, ios_build]
    permissions: write-all

    steps:
      - uses: actions/checkout@v2

      - name: Make release dir
        run: mkdir release

      - name: Download linux client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-linux-amd64.zip
          path: release
      - name: Download windows client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-windows.exe
          path: release
      - name: Download macos client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-darwin-arm64
          path: release
      - name: Download android client
        uses: actions/download-artifact@master
        with:
          name: dobbyvpn-android.apk
          path: release

      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          files: release/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
